name: Build Backend

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    container:
      image: python:3.11-slim
      
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: app_db
          POSTGRES_USER: appuser
          POSTGRES_PASSWORD: devpassword123
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      rabbitmq:
        image: rabbitmq:3.12-management
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 30s
          --health-timeout 30s
          --health-retries 3

    steps:
    - uses: actions/checkout@v4
    
    - name: Install system dependencies (matching your Dockerfile)
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        apt-get update && apt-get install -y --no-install-recommends \
          ffmpeg \
          python3-opencv \
          libgomp1 \
        && rm -rf /var/lib/apt/lists/*

    - name: Set up virtual environment
      env:
        VIRTUAL_ENV: /opt/venv
      run: |
        export PATH="$VIRTUAL_ENV/bin:$PATH"
        python -m venv "$VIRTUAL_ENV" && pip install --upgrade pip setuptools wheel

    - name: Filter and install requirements (your exact filtering)
      env:
        VIRTUAL_ENV: /opt/venv
      run: |
        export PATH="$VIRTUAL_ENV/bin:$PATH"
        awk 'BEGIN{IGNORECASE=1} !/^opencv-python(-headless|-contrib)?([=<>!].*)?$/ {print}' \
          requirements.txt > requirements.filtered.txt
        pip install --no-cache-dir -r requirements.filtered.txt

    - name: Link system cv2 (your exact Python script)
      env:
        VIRTUAL_ENV: /opt/venv
      run: |
        export PATH="$VIRTUAL_ENV/bin:$PATH"
        python - <<'PY'
        import site, pathlib
        pth = pathlib.Path(site.getsitepackages()[0]) / "_system_cv2.pth"
        pth.write_text("/usr/lib/python3/dist-packages\n/usr/lib/python3.11/dist-packages\n")
        print("Linked system cv2 via", pth)
        PY

    - name: Test OpenCV and run Django tests
      env:
        VIRTUAL_ENV: /opt/venv
        DATABASE_URL: postgresql://appuser:devpassword123@postgres:5432/app_db
        SECRET_KEY: test-secret-key
        CELERY_BROKER_URL: pyamqp://guest@rabbitmq:5672//
        YOLO_CONFIG_DIR: /tmp/Ultralytics
        OPENCV_VIDEOIO_PRIORITY_FFMPEG: 1000
        OPENCV_FFMPEG_WRITER_OPTIONS: "video_codec;libx264|preset;veryfast|crf;23|pix_fmt;yuv420p"
        PYTHONUNBUFFERED: 1
        PYTHONDONTWRITEBYTECODE: 1
      run: |
        export PATH="$VIRTUAL_ENV/bin:$PATH"
        python -c "import cv2; print('OpenCV version:', cv2.__version__)"
        python manage.py migrate
        python manage.py test

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Build and push backend
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          rahul001935/workflow-synthesizer:backend-latest
          rahul001935/workflow-synthesizer:${{ github.sha }}
        build-args: |
          DEBIAN_FRONTEND=noninteractive

